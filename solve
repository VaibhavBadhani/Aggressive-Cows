class Solution {
public:
    bool isposs(vector<int> &stalls,int k ,int mid)
    {
        int count =1;
        int last = stalls[0];
        for(int i =0;i<stalls.size();i++)
        {
            if(stalls[i]-last>=mid)
            {
                count++;
                last= stalls[i];
            }
            if(count==k){ return true;}
        }
        return false;
    }

    int solve(int n, int k, vector<int> &stalls) {
        // Write your code here
        sort(stalls.begin(),stalls.end());
        int start = 0;
        int end = stalls[stalls.size()-1]-stalls[0];
        int mid = start+(end-start)/2;
        int ans = -1;
        while(start<=end)
        {
            if(isposs(stalls,k,mid))
            {
                ans= mid;
                start= mid+1;
            }
            else
            {
                end=mid-1;
            }
             mid = start+(end-start)/2;
        }
        return ans;
    }
};
